> rm(list=ls())
> constrained.kmeans <- function(p,a,std,k,b,imax,seed,details){
+ # Bob Agnew (raagnew1@gmail.com, www.raagnew.com)
+ # Constrained k-means clustering using lp.transport function
+ # in R package lpSolve
+ # Implements Bradley-Bennett-Demiriz algorithm
+ # p = population vector associated with observations
+ # Population for each observation must be assigned to same cluster
+ # For a normal clustering problem, p is a vector of ones
+ # a = numeric attribute matrix with a row for each observation
+ # std = TRUE if attributes are to be standardized across observations,
+ # else FALSE
+ # k = specified number of k-means clusters
+ # b = vector of integer lower bounds for population clusters
+ # If all populations are one, then these are exact lower bounds
+ # for cluster sizes
+ # If populations vary, then these are target lower bounds for
+ # cluster populations
+ # imax = maximum number of iterations in kmeans loop
+ # seed = random number seed for initial cluster assignments
+ # details = TRUE for printing of iteration details, else FALSE
+ m <- dim(a)[1] # Number of observations
+ n <- dim(a)[2] # Number of attributes
+ if (std) {a <- apply(a,2,function(u) (u-mean(u))/sd(u))}
+ set.seed(seed,kind=NULL,normal.kind=NULL) # Set random number seed
+ c <- sample.int(k,m,replace=TRUE,prob=NULL) # Initial cluster vector
+ require(lpSolve) # Load R linear programming package
+ num <- iter <- 1
+ while (iter <= imax & num > 0){
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ # Solution of transportation linear program
+ trans <- lp.transport(cost,"min",rep("=",m),p,rep(">=",k),b)
+ # Generate new clusters
+ # For split allocation, assign to maximal cluster
+ c1 <- apply(trans$solution,1,which.max)
+ num <- sum(c1!=c)
+ if (details){
+ print(noquote("Iteration Number"))
+ print(iter)
+ print(trans)
+ print(noquote("Number of split allocations"))
+ print(sum(apply(trans$solution,1,max) < p))
+ print(noquote("Number of revised cluster elements"))
+ print(num)}
+ c <- c1 #Clusters revised
+ iter <- iter + 1
+ }
+ means <- NULL
+ for (j in 1:n){
+ means <- cbind(means,tapply(p*a[,j],c,sum)/tapply(p,c,sum))}
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ cost <- matrix(p,nrow=m,ncol=k)*cost
+ ss <- sum(cost*outer(c,1:k,"=="))
+ result <- list(iter-1,num==0,c,tapply(p,c,sum),means,ss)
+ names(result) <- c("iter","converge","cluster","population","centers",
+ "tot.withinss")
+ return(result)}
> 
> date() # Time
[1] "Tue Sep 28 09:20:21 2021"
> # Read in Texas census block group data
> # Downloaded TX data from https://www2.census.gov/programs-surveys/decennial/2020/data/01-Redistricting_File--PL_94-171/
> # Trimmed data in TX_Extract.R script
> data <- read.table("c:/Congressional_Districting/TX_Blkgrps.txt",sep=",",header=TRUE)
> # Remove dummy block groups with no population 
> data <- data[data[,4]!="0",]
> p <- sapply(data[,4],as.numeric) #Census block group populations
> # Number of census block groups with positive population
> length(p)
[1] 18561
> # Block group population range
> range(p)
[1]     1 19522
> # Block group population mean
> mean(p)
[1] 1570.255
> # Block group population median
> median(p)
[1] 1401
> a <- matrix(sapply(data[,c(6,5)],as.numeric),ncol=2) # Block group longitudes and latitudes
> # Block group longitude range
> range(a[,1])
[1] -106.62495  -93.57533
> # Block group latitude range
> range(a[,2])
[1] 25.86078 36.41110
> k <- 38 # Number of clusters = number of TX congressional districts
> 
> # Constrained k-means clustering applied to TX congressional districting
> # Target population lower bounds set tightly at average rounded down
> ckm <- constrained.kmeans(p,a,FALSE,k,rep(floor(sum(p)/k),k),100,23,TRUE)
Loading required package: lpSolve
[1] Iteration Number
[1] 1
Success: the objective function is 244563309 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 18023
[1] Iteration Number
[1] 2
Success: the objective function is 11750303 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 5085
[1] Iteration Number
[1] 3
Success: the objective function is 8077406 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 2124
[1] Iteration Number
[1] 4
Success: the objective function is 7823688 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 957
[1] Iteration Number
[1] 5
Success: the objective function is 7792266 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 528
[1] Iteration Number
[1] 6
Success: the objective function is 7784024 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 347
[1] Iteration Number
[1] 7
Success: the objective function is 7779295 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 236
[1] Iteration Number
[1] 8
Success: the objective function is 7776830 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 188
[1] Iteration Number
[1] 9
Success: the objective function is 7775598 
[1] Number of split allocations
[1] 36
[1] Number of revised cluster elements
[1] 151
[1] Iteration Number
[1] 10
Success: the objective function is 7775127 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 82
[1] Iteration Number
[1] 11
Success: the objective function is 7774885 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 73
[1] Iteration Number
[1] 12
Success: the objective function is 7774603 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 63
[1] Iteration Number
[1] 13
Success: the objective function is 7774522 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 46
[1] Iteration Number
[1] 14
Success: the objective function is 7774491 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 35
[1] Iteration Number
[1] 15
Success: the objective function is 7774471 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 32
[1] Iteration Number
[1] 16
Success: the objective function is 7774455 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 14
[1] Iteration Number
[1] 17
Success: the objective function is 7774448 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 17
[1] Iteration Number
[1] 18
Success: the objective function is 7774442 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 13
[1] Iteration Number
[1] 19
Success: the objective function is 7774434 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 17
[1] Iteration Number
[1] 20
Success: the objective function is 7774423 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 12
[1] Iteration Number
[1] 21
Success: the objective function is 7774420 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 7
[1] Iteration Number
[1] 22
Success: the objective function is 7774417 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 7
[1] Iteration Number
[1] 23
Success: the objective function is 7774416 
[1] Number of split allocations
[1] 37
[1] Number of revised cluster elements
[1] 0
Warning message:
package ‘lpSolve’ was built under R version 3.6.2 
> ckm$iter
[1] 23
> ckm$converge
[1] TRUE
> ckm$tot.withinss
[1] 7797811
> ckm$population # Approximately equal
     1      2      3      4      5      6      7      8      9     10     11     12     13     14     15     16     17     18     19     20     21     22     23     24 
766683 766898 768954 766995 766220 767389 764917 766263 767454 766873 765761 767911 767586 766350 767262 766526 767258 766631 767079 768691 767607 766058 766732 768518 
    25     26     27     28     29     30     31     32     33     34     35     36     37     38 
767437 766734 765661 767176 767148 766941 767452 766885 767018 766522 767447 767632 765916 766920 
> MEAN_LONGITUDE <- ckm$centers[,1]
> MEAN_LATITUDE <- ckm$centers[,2]
> c <- ckm$cluster
> CLUSTER <- sapply(c,as.character)
> 
> # Save blockgroup table with appended clusters
> write.table(cbind(data,CLUSTER),file="c:/CONGRESSIONAL_DISTRICTING/TX_Blkgroup_Clusters.txt",sep=",",row.names=FALSE,col.names=TRUE)
> 
> # Geoplot of TX census block groups and cluster centroids
> pdf("c:/CONGRESSIONAL_DISTRICTING/TX_Census_Block_Group_Centroids.pdf")
> plot(a[,1],a[,2],col="black",pch=19,cex=.25,asp=1.5,xlab="LONGITUDE",ylab="LATITUDE",
+ main="TEXAS CENSUS BLOCK GROUPS & CLUSTER CENTROIDS")
> points(MEAN_LONGITUDE,MEAN_LATITUDE,col="red",pch=19,cex=.75)
> dev.off()
null device 
          1 
> 
> # Geoplot of TX census block group clusters
> pdf("c:/CONGRESSIONAL_DISTRICTING/TX_Census_Block_Group_Clusters.pdf")
> plot(a[,1],a[,2],asp=1.5,cex=.25,col=rainbow(k)[c],pch=19,xlab="LONGITUDE",ylab="LATITUDE",
+ main="TEXAS CENSUS BLOCK GROUP CLUSTERS")
> dev.off()
null device 
          1 
> date() # Time
[1] "Tue Sep 28 12:04:03 2021"
> 
