> rm(list=ls())
> constrained.kmeans <- function(p,a,std,k,b,imax,seed,details){
+ # Bob Agnew (raagnew1@gmail.com, www.raagnew.com)
+ # Constrained k-means clustering using lp.transport function
+ # in R package lpSolve
+ # Implements Bradley-Bennett-Demiriz algorithm
+ # p = population vector associated with observations
+ # Population for each observation must be assigned to same cluster
+ # For a normal clustering problem, p is a vector of ones
+ # a = numeric attribute matrix with a row for each observation
+ # std = TRUE if attributes are to be standardized across observations,
+ # else FALSE
+ # k = specified number of k-means clusters
+ # b = vector of integer lower bounds for population clusters
+ # If all populations are one, then these are exact lower bounds
+ # for cluster sizes
+ # If populations vary, then these are target lower bounds for
+ # cluster populations
+ # imax = maximum number of iterations in kmeans loop
+ # seed = random number seed for initial cluster assignments
+ # details = TRUE for printing of iteration details, else FALSE
+ m <- dim(a)[1] # Number of observations
+ n <- dim(a)[2] # Number of attributes
+ if (std) {a <- apply(a,2,function(u) (u-mean(u))/sd(u))}
+ set.seed(seed,kind=NULL,normal.kind=NULL) # Set random number seed
+ c <- sample.int(k,m,replace=TRUE,prob=NULL) # Initial cluster vector
+ require(lpSolve) # Load R linear programming package
+ num <- iter <- 1
+ while (iter <= imax & num > 0){
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ # Solution of transportation linear program
+ trans <- lp.transport(cost,"min",rep("=",m),p,rep(">=",k),b)
+ # Generate new clusters
+ # For split allocation, assign to maximal cluster
+ c1 <- apply(trans$solution,1,which.max)
+ num <- sum(c1!=c)
+ if (details){
+ print(noquote("Iteration Number"))
+ print(iter)
+ print(trans)
+ print(noquote("Number of split allocations"))
+ print(sum(apply(trans$solution,1,max) < p))
+ print(noquote("Number of revised cluster elements"))
+ print(num)}
+ c <- c1 #Clusters revised
+ iter <- iter + 1
+ }
+ means <- NULL
+ for (j in 1:n){
+ means <- cbind(means,tapply(p*a[,j],c,sum)/tapply(p,c,sum))}
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ cost <- matrix(p,nrow=m,ncol=k)*cost
+ ss <- sum(cost*outer(c,1:k,"=="))
+ result <- list(iter-1,num==0,c,tapply(p,c,sum),means,ss)
+ names(result) <- c("iter","converge","cluster","population","centers",
+ "tot.withinss")
+ return(result)}
> 
> date() # Time
[1] "Mon Sep 27 09:25:26 2021"
> # Read in New York census block group data
> # Downloaded NY data from https://www2.census.gov/programs-surveys/decennial/2020/data/01-Redistricting_File--PL_94-171/
> # Trimmed data in NY_Extract.R script
> data <- read.table("c:/Congressional_Districting/NY_Blkgrps.txt",sep=",",header=TRUE)
> # Remove dummy block groups with no population 
> data <- data[data[,4]!="0",]
> p <- sapply(data[,4],as.numeric) #Census block group populations
> # Number of census block groups with positive population
> length(p)
[1] 15739
> # Block group population range
> range(p)
[1]    1 9343
> # Block group population mean
> mean(p)
[1] 1283.515
> # Block group population median
> median(p)
[1] 1194
> a <- matrix(sapply(data[,c(6,5)],as.numeric),ncol=2) # Block group longitudes and latitudes
> # Block group longitude range
> range(a[,1])
[1] -79.71274 -71.89384
> # Block group latitude range
> range(a[,2])
[1] 40.50039 45.00452
> k <- 26 # Number of clusters = number of NY congressional districts
> 
> # Constrained k-means clustering applied to NY congressional districting
> # Target population lower bounds set tightly at average rounded down
> ckm <- constrained.kmeans(p,a,FALSE,k,rep(floor(sum(p)/k),k),100,23,TRUE)
Loading required package: lpSolve
[1] Iteration Number
[1] 1
Success: the objective function is 70009988 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 15113
[1] Iteration Number
[1] 2
Success: the objective function is 2701987 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 4483
[1] Iteration Number
[1] 3
Success: the objective function is 1958308 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 1716
[1] Iteration Number
[1] 4
Success: the objective function is 1912892 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 1063
[1] Iteration Number
[1] 5
Success: the objective function is 1903319 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 894
[1] Iteration Number
[1] 6
Success: the objective function is 1898664 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 577
[1] Iteration Number
[1] 7
Success: the objective function is 1897197 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 309
[1] Iteration Number
[1] 8
Success: the objective function is 1895834 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 282
[1] Iteration Number
[1] 9
Success: the objective function is 1894549 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 246
[1] Iteration Number
[1] 10
Success: the objective function is 1893507 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 204
[1] Iteration Number
[1] 11
Success: the objective function is 1892637 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 222
[1] Iteration Number
[1] 12
Success: the objective function is 1890731 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 235
[1] Iteration Number
[1] 13
Success: the objective function is 1887902 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 233
[1] Iteration Number
[1] 14
Success: the objective function is 1883192 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 192
[1] Iteration Number
[1] 15
Success: the objective function is 1878417 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 215
[1] Iteration Number
[1] 16
Success: the objective function is 1869196 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 225
[1] Iteration Number
[1] 17
Success: the objective function is 1861630 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 217
[1] Iteration Number
[1] 18
Success: the objective function is 1852965 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 213
[1] Iteration Number
[1] 19
Success: the objective function is 1841265 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 156
[1] Iteration Number
[1] 20
Success: the objective function is 1835424 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 100
[1] Iteration Number
[1] 21
Success: the objective function is 1834215 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 65
[1] Iteration Number
[1] 22
Success: the objective function is 1833780 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 56
[1] Iteration Number
[1] 23
Success: the objective function is 1833451 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 44
[1] Iteration Number
[1] 24
Success: the objective function is 1833342 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 38
[1] Iteration Number
[1] 25
Success: the objective function is 1833287 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 35
[1] Iteration Number
[1] 26
Success: the objective function is 1833268 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 24
[1] Iteration Number
[1] 27
Success: the objective function is 1833261 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 13
[1] Iteration Number
[1] 28
Success: the objective function is 1833260 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 14
[1] Iteration Number
[1] 29
Success: the objective function is 1833260 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 14
[1] Iteration Number
[1] 30
Success: the objective function is 1833259 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 9
[1] Iteration Number
[1] 31
Success: the objective function is 1833259 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 12
[1] Iteration Number
[1] 32
Success: the objective function is 1833259 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 9
[1] Iteration Number
[1] 33
Success: the objective function is 1833259 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 9
[1] Iteration Number
[1] 34
Success: the objective function is 1833258 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 3
[1] Iteration Number
[1] 35
Success: the objective function is 1833258 
[1] Number of split allocations
[1] 25
[1] Number of revised cluster elements
[1] 0
Warning message:
package ‘lpSolve’ was built under R version 3.6.2 
> ckm$iter
[1] 35
> ckm$converge
[1] TRUE
> ckm$tot.withinss
[1] 1833229
> ckm$population # Approximately equal
     1      2      3      4      5      6      7      8      9     10     11 
776593 776644 776198 776597 777188 776853 776912 776432 776890 776148 777362 
    12     13     14     15     16     17     18     19     20     21     22 
777580 776946 777217 776578 776431 777019 777361 777238 777439 777864 778333 
    23     24     25     26 
776989 777177 777180 776080 
> MEAN_LONGITUDE <- ckm$centers[,1]
> MEAN_LATITUDE <- ckm$centers[,2]
> c <- ckm$cluster
> CLUSTER <- sapply(c,as.character)
> 
> # Save blockgroup table with appended clusters
> write.table(cbind(data,CLUSTER),file="c:/CONGRESSIONAL_DISTRICTING/NY_Blkgroup_Clusters.txt",sep=",",row.names=FALSE,col.names=TRUE)
> 
> # Geoplot of NY census block groups and cluster centroids
> pdf("c:/CONGRESSIONAL_DISTRICTING/NY_Census_Block_Group_Centroids.pdf")
> plot(a[,1],a[,2],col="black",pch=19,cex=.25,asp=1.5,xlab="LONGITUDE",ylab="LATITUDE",
+ main="NEW YORK CENSUS BLOCK GROUPS & CLUSTER CENTROIDS")
> points(MEAN_LONGITUDE,MEAN_LATITUDE,col="red",pch=19,cex=.75)
> dev.off()
null device 
          1 
> 
> # Geoplot of NY census block group clusters
> pdf("c:/CONGRESSIONAL_DISTRICTING/NY_Census_Block_Group_Clusters.pdf")
> plot(a[,1],a[,2],asp=1.5,cex=.25,col=rainbow(k)[c],pch=19,xlab="LONGITUDE",ylab="LATITUDE",
+ main="NEW YORK CENSUS BLOCK GROUP CLUSTERS")
> dev.off()
null device 
          1 
> date() # Time
[1] "Mon Sep 27 11:12:38 2021"
> 
