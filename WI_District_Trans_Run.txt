> rm(list=ls())
> constrained.kmeans <- function(p,a,std,k,b,imax,seed,details){
+ # Bob Agnew (raagnew1@gmail.com, www.raagnew.com)
+ # Constrained k-means clustering using lp.transport function
+ # in R package lpSolve
+ # Implements Bradley-Bennett-Demiriz algorithm
+ # p = population vector associated with observations
+ # Population for each observation must be assigned to same cluster
+ # For a normal clustering problem, p is a vector of ones
+ # a = numeric attribute matrix with a row for each observation
+ # std = TRUE if attributes are to be standardized across observations,
+ # else FALSE
+ # k = specified number of k-means clusters
+ # b = vector of integer lower bounds for population clusters
+ # If all populations are one, then these are exact lower bounds
+ # for cluster sizes
+ # If populations vary, then these are target lower bounds for
+ # cluster populations
+ # imax = maximum number of iterations in kmeans loop
+ # seed = random number seed for initial cluster assignments
+ # details = TRUE for printing of iteration details, else FALSE
+ m <- dim(a)[1] # Number of observations
+ n <- dim(a)[2] # Number of attributes
+ if (std) {a <- apply(a,2,function(u) (u-mean(u))/sd(u))}
+ set.seed(seed,kind=NULL,normal.kind=NULL) # Set random number seed
+ c <- sample.int(k,m,replace=TRUE,prob=NULL) # Initial cluster vector
+ require(lpSolve) # Load R linear programming package
+ num <- iter <- 1
+ while (iter <= imax & num > 0){
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ # Solution of transportation linear program
+ trans <- lp.transport(cost,"min",rep("=",m),p,rep(">=",k),b)
+ # Generate new clusters
+ # For split allocation, assign to maximal cluster
+ c1 <- apply(trans$solution,1,which.max)
+ num <- sum(c1!=c)
+ if (details){
+ print(noquote("Iteration Number"))
+ print(iter)
+ print(trans)
+ print(noquote("Number of split allocations"))
+ print(sum(apply(trans$solution,1,max) < p))
+ print(noquote("Number of revised cluster elements"))
+ print(num)}
+ c <- c1 #Clusters revised
+ iter <- iter + 1
+ }
+ means <- NULL
+ for (j in 1:n){
+ means <- cbind(means,tapply(p*a[,j],c,sum)/tapply(p,c,sum))}
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ cost <- matrix(p,nrow=m,ncol=k)*cost
+ ss <- sum(cost*outer(c,1:k,"=="))
+ result <- list(iter-1,num==0,c,tapply(p,c,sum),means,ss)
+ names(result) <- c("iter","converge","cluster","population","centers",
+ "tot.withinss")
+ return(result)}
> 
> date() # Time
[1] "Sun Oct 17 19:10:25 2021"
> # Read in Wisconsin census block group data
> # Downloaded WI data from https://www2.census.gov/programs-surveys/decennial/2020/data/01-Redistricting_File--PL_94-171/
> # Trimmed data in WI_Extract.R script
> data <- read.table("c:/Congressional_Districting/WI_Blkgrps.txt",sep=",",header=TRUE)
> # Remove dummy block groups with no population 
> data <- data[data[,4]!="0",]
> p <- sapply(data[,4],as.numeric) #Census block group populations
> # Number of census block groups with positive population
> length(p)
[1] 4674
> # Block group population range
> range(p)
[1]    3 4606
> # Block group population mean
> mean(p)
[1] 1260.958
> # Block group population median
> median(p)
[1] 1136
> a <- matrix(sapply(data[,c(6,5)],as.numeric),ncol=2) # Block group longitudes and latitudes
> # Block group longitude range
> range(a[,1])
[1] -92.79764 -86.95615
> # Block group latitude range
> range(a[,2])
[1] 42.49896 46.98359
> k <- 8 # Number of clusters = number of WI congressional districts
> 
> # Constrained k-means clustering applied to WI congressional districting
> # Target population lower bounds set tightly at average rounded down
> ckm <- constrained.kmeans(p,a,FALSE,k,rep(floor(sum(p)/k),k),100,23,TRUE)
[1] Iteration Number
[1] 1
Success: the objective function is 14314345 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 4090
[1] Iteration Number
[1] 2
Success: the objective function is 2752992 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 1112
[1] Iteration Number
[1] 3
Success: the objective function is 2197584 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 356
[1] Iteration Number
[1] 4
Success: the objective function is 2123468 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 382
[1] Iteration Number
[1] 5
Success: the objective function is 1970855 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 328
[1] Iteration Number
[1] 6
Success: the objective function is 1918461 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 221
[1] Iteration Number
[1] 7
Success: the objective function is 1909891 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 182
[1] Iteration Number
[1] 8
Success: the objective function is 1901986 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 174
[1] Iteration Number
[1] 9
Success: the objective function is 1898756 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 105
[1] Iteration Number
[1] 10
Success: the objective function is 1897604 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 71
[1] Iteration Number
[1] 11
Success: the objective function is 1896228 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 68
[1] Iteration Number
[1] 12
Success: the objective function is 1893148 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 78
[1] Iteration Number
[1] 13
Success: the objective function is 1886422 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 109
[1] Iteration Number
[1] 14
Success: the objective function is 1875311 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 104
[1] Iteration Number
[1] 15
Success: the objective function is 1866469 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 88
[1] Iteration Number
[1] 16
Success: the objective function is 1861561 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 68
[1] Iteration Number
[1] 17
Success: the objective function is 1859227 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 43
[1] Iteration Number
[1] 18
Success: the objective function is 1857991 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 36
[1] Iteration Number
[1] 19
Success: the objective function is 1857286 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 35
[1] Iteration Number
[1] 20
Success: the objective function is 1856679 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 30
[1] Iteration Number
[1] 21
Success: the objective function is 1855982 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 29
[1] Iteration Number
[1] 22
Success: the objective function is 1855156 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 41
[1] Iteration Number
[1] 23
Success: the objective function is 1854051 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 31
[1] Iteration Number
[1] 24
Success: the objective function is 1853498 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 44
[1] Iteration Number
[1] 25
Success: the objective function is 1852805 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 39
[1] Iteration Number
[1] 26
Success: the objective function is 1852517 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 33
[1] Iteration Number
[1] 27
Success: the objective function is 1852264 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 40
[1] Iteration Number
[1] 28
Success: the objective function is 1852075 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 32
[1] Iteration Number
[1] 29
Success: the objective function is 1851853 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 24
[1] Iteration Number
[1] 30
Success: the objective function is 1851706 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 24
[1] Iteration Number
[1] 31
Success: the objective function is 1851471 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 21
[1] Iteration Number
[1] 32
Success: the objective function is 1851095 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 23
[1] Iteration Number
[1] 33
Success: the objective function is 1850638 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 24
[1] Iteration Number
[1] 34
Success: the objective function is 1850225 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 19
[1] Iteration Number
[1] 35
Success: the objective function is 1849982 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 19
[1] Iteration Number
[1] 36
Success: the objective function is 1849821 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 16
[1] Iteration Number
[1] 37
Success: the objective function is 1849537 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 13
[1] Iteration Number
[1] 38
Success: the objective function is 1849423 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 13
[1] Iteration Number
[1] 39
Success: the objective function is 1849176 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 21
[1] Iteration Number
[1] 40
Success: the objective function is 1848605 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 24
[1] Iteration Number
[1] 41
Success: the objective function is 1847794 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 30
[1] Iteration Number
[1] 42
Success: the objective function is 1846848 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 29
[1] Iteration Number
[1] 43
Success: the objective function is 1846217 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 18
[1] Iteration Number
[1] 44
Success: the objective function is 1845639 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 21
[1] Iteration Number
[1] 45
Success: the objective function is 1844708 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 33
[1] Iteration Number
[1] 46
Success: the objective function is 1842554 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 46
[1] Iteration Number
[1] 47
Success: the objective function is 1839083 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 62
[1] Iteration Number
[1] 48
Success: the objective function is 1833306 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 64
[1] Iteration Number
[1] 49
Success: the objective function is 1828173 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 75
[1] Iteration Number
[1] 50
Success: the objective function is 1823769 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 52
[1] Iteration Number
[1] 51
Success: the objective function is 1821620 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 54
[1] Iteration Number
[1] 52
Success: the objective function is 1819089 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 46
[1] Iteration Number
[1] 53
Success: the objective function is 1817978 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 33
[1] Iteration Number
[1] 54
Success: the objective function is 1816969 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 21
[1] Iteration Number
[1] 55
Success: the objective function is 1816481 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 16
[1] Iteration Number
[1] 56
Success: the objective function is 1816227 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 23
[1] Iteration Number
[1] 57
Success: the objective function is 1815972 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 17
[1] Iteration Number
[1] 58
Success: the objective function is 1815818 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 13
[1] Iteration Number
[1] 59
Success: the objective function is 1815712 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 9
[1] Iteration Number
[1] 60
Success: the objective function is 1815687 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 6
[1] Iteration Number
[1] 61
Success: the objective function is 1815680 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 1
[1] Iteration Number
[1] 62
Success: the objective function is 1815680 
[1] Number of split allocations
[1] 7
[1] Number of revised cluster elements
[1] 0
> ckm$iter
[1] 62
> ckm$converge
[1] TRUE
> ckm$tot.withinss
[1] 1816065
> ckm$population # Approximately equal
     1      2      3      4      5      6      7      8 
736248 735895 737607 736941 735908 737037 737010 737072 
> MEAN_LONGITUDE <- ckm$centers[,1]
> MEAN_LATITUDE <- ckm$centers[,2]
> c <- ckm$cluster
> CLUSTER <- sapply(c,as.character)
> 
> # Save blockgroup table with appended clusters
> write.table(cbind(data,CLUSTER),file="c:/CONGRESSIONAL_DISTRICTING/WI_Blkgroup_Clusters.txt",sep=",",row.names=FALSE,col.names=TRUE)
> 
> # Geoplot of WI census block groups and cluster centroids
> pdf("c:/CONGRESSIONAL_DISTRICTING/WI_Census_Block_Group_Centroids.pdf")
> plot(a[,1],a[,2],col="black",pch=19,cex=.25,asp=1.5,xlab="LONGITUDE",ylab="LATITUDE",
+ main="WISCONSIN CENSUS BLOCK GROUPS & CLUSTER CENTROIDS")
> points(MEAN_LONGITUDE,MEAN_LATITUDE,col="red",pch=19,cex=.75)
> dev.off()
null device 
          1 
> 
> # Geoplot of WI census block group clusters
> pdf("c:/CONGRESSIONAL_DISTRICTING/WI_Census_Block_Group_Clusters.pdf")
> plot(a[,1],a[,2],asp=1.5,cex=.25,col=rainbow(k)[c],pch=19,xlab="LONGITUDE",ylab="LATITUDE",
+ main="WISCONSIN CENSUS BLOCK GROUP CLUSTERS")
> dev.off()
null device 
          1 
> date() # Time
[1] "Sun Oct 17 19:13:13 2021"
> 
> 
