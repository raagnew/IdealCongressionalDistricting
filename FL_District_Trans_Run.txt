> rm(list=ls())
> constrained.kmeans <- function(p,a,std,k,b,imax,seed,details){
+ # Bob Agnew (raagnew1@gmail.com, www.raagnew.com)
+ # Constrained k-means clustering using lp.transport function
+ # in R package lpSolve
+ # Implements Bradley-Bennett-Demiriz algorithm
+ # p = population vector associated with observations
+ # Population for each observation must be assigned to same cluster
+ # For a normal clustering problem, p is a vector of ones
+ # a = numeric attribute matrix with a row for each observation
+ # std = TRUE if attributes are to be standardized across observations,
+ # else FALSE
+ # k = specified number of k-means clusters
+ # b = vector of integer lower bounds for population clusters
+ # If all populations are one, then these are exact lower bounds
+ # for cluster sizes
+ # If populations vary, then these are target lower bounds for
+ # cluster populations
+ # imax = maximum number of iterations in kmeans loop
+ # seed = random number seed for initial cluster assignments
+ # details = TRUE for printing of iteration details, else FALSE
+ m <- dim(a)[1] # Number of observations
+ n <- dim(a)[2] # Number of attributes
+ if (std) {a <- apply(a,2,function(u) (u-mean(u))/sd(u))}
+ set.seed(seed,kind=NULL,normal.kind=NULL) # Set random number seed
+ c <- sample.int(k,m,replace=TRUE,prob=NULL) # Initial cluster vector
+ require(lpSolve) # Load R linear programming package
+ num <- iter <- 1
+ while (iter <= imax & num > 0){
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ # Solution of transportation linear program
+ trans <- lp.transport(cost,"min",rep("=",m),p,rep(">=",k),b)
+ # Generate new clusters
+ # For split allocation, assign to maximal cluster
+ c1 <- apply(trans$solution,1,which.max)
+ num <- sum(c1!=c)
+ if (details){
+ print(noquote("Iteration Number"))
+ print(iter)
+ print(trans)
+ print(noquote("Number of split allocations"))
+ print(sum(apply(trans$solution,1,max) < p))
+ print(noquote("Number of revised cluster elements"))
+ print(num)}
+ c <- c1 #Clusters revised
+ iter <- iter + 1
+ }
+ means <- NULL
+ for (j in 1:n){
+ means <- cbind(means,tapply(p*a[,j],c,sum)/tapply(p,c,sum))}
+ cost <- matrix(0,nrow=m,ncol=k)
+ for (j in 1:n){
+ cost <- cost + outer(a[,j],tapply(p*a[,j],c,sum)/tapply(p,c,sum),"-")^2}
+ cost <- matrix(p,nrow=m,ncol=k)*cost
+ ss <- sum(cost*outer(c,1:k,"=="))
+ result <- list(iter-1,num==0,c,tapply(p,c,sum),means,ss)
+ names(result) <- c("iter","converge","cluster","population","centers",
+ "tot.withinss")
+ return(result)}
> 
> date() # Time
[1] "Mon Sep 27 18:05:54 2021"
> # Read in Florida census block group data
> # Downloaded FL data from https://www2.census.gov/programs-surveys/decennial/2020/data/01-Redistricting_File--PL_94-171/
> # Trimmed data in FL_Extract.R script
> data <- read.table("c:/Congressional_Districting/FL_Blkgrps.txt",sep=",",header=TRUE)
> # Remove dummy block groups with no population 
> data <- data[data[,4]!="0",]
> p <- sapply(data[,4],as.numeric) #Census block group populations
> # Number of census block groups with positive population
> length(p)
[1] 13317
> # Block group population range
> range(p)
[1]     1 18071
> # Block group population mean
> mean(p)
[1] 1617.345
> # Block group population median
> median(p)
[1] 1446
> a <- matrix(sapply(data[,c(6,5)],as.numeric),ncol=2) # Block group longitudes and latitudes
> # Block group longitude range
> range(a[,1])
[1] -87.52236 -80.03322
> # Block group latitude range
> range(a[,2])
[1] 24.54720 30.98368
> k <- 28 # Number of clusters = number of FL congressional districts
> 
> # Constrained k-means clustering applied to FL congressional districting
> # Target population lower bounds set tightly at average rounded down
> ckm <- constrained.kmeans(p,a,FALSE,k,rep(floor(sum(p)/k),k),100,23,TRUE)
Loading required package: lpSolve
[1] Iteration Number
[1] 1
Success: the objective function is 89858995 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 12821
[1] Iteration Number
[1] 2
Success: the objective function is 2514946 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 2700
[1] Iteration Number
[1] 3
Success: the objective function is 1984947 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 1455
[1] Iteration Number
[1] 4
Success: the objective function is 1784801 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 1141
[1] Iteration Number
[1] 5
Success: the objective function is 1652346 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 711
[1] Iteration Number
[1] 6
Success: the objective function is 1598209 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 495
[1] Iteration Number
[1] 7
Success: the objective function is 1566707 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 313
[1] Iteration Number
[1] 8
Success: the objective function is 1555634 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 210
[1] Iteration Number
[1] 9
Success: the objective function is 1550993 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 191
[1] Iteration Number
[1] 10
Success: the objective function is 1546369 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 209
[1] Iteration Number
[1] 11
Success: the objective function is 1540694 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 230
[1] Iteration Number
[1] 12
Success: the objective function is 1534760 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 230
[1] Iteration Number
[1] 13
Success: the objective function is 1530240 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 244
[1] Iteration Number
[1] 14
Success: the objective function is 1527329 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 157
[1] Iteration Number
[1] 15
Success: the objective function is 1526612 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 106
[1] Iteration Number
[1] 16
Success: the objective function is 1526392 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 51
[1] Iteration Number
[1] 17
Success: the objective function is 1526344 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 29
[1] Iteration Number
[1] 18
Success: the objective function is 1526331 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 17
[1] Iteration Number
[1] 19
Success: the objective function is 1526314 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 20
[1] Iteration Number
[1] 20
Success: the objective function is 1526273 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 8
[1] Iteration Number
[1] 21
Success: the objective function is 1526254 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 6
[1] Iteration Number
[1] 22
Success: the objective function is 1526244 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 4
[1] Iteration Number
[1] 23
Success: the objective function is 1526240 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 3
[1] Iteration Number
[1] 24
Success: the objective function is 1526237 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 4
[1] Iteration Number
[1] 25
Success: the objective function is 1526232 
[1] Number of split allocations
[1] 27
[1] Number of revised cluster elements
[1] 0
Warning message:
package ‘lpSolve’ was built under R version 3.6.2 
> ckm$iter
[1] 25
> ckm$converge
[1] TRUE
> ckm$tot.withinss
[1] 1526661
> ckm$population # Approximately equal
     1      2      3      4      5      6      7      8      9     10     11 
768856 768971 767297 770431 769601 769546 770425 770168 769126 769773 769967 
    12     13     14     15     16     17     18     19     20     21     22 
769219 768854 768091 769293 770561 769093 769704 769478 769665 768590 768150 
    23     24     25     26     27     28 
769049 768163 769198 769020 768073 769825 
> MEAN_LONGITUDE <- ckm$centers[,1]
> MEAN_LATITUDE <- ckm$centers[,2]
> c <- ckm$cluster
> CLUSTER <- sapply(c,as.character)
> 
> # Save blockgroup table with appended clusters
> write.table(cbind(data,CLUSTER),file="c:/CONGRESSIONAL_DISTRICTING/FL_Blkgroup_Clusters.txt",sep=",",row.names=FALSE,col.names=TRUE)
> 
> # Geoplot of FL census block groups and cluster centroids
> pdf("c:/CONGRESSIONAL_DISTRICTING/FL_Census_Block_Group_Centroids.pdf")
> plot(a[,1],a[,2],col="black",pch=19,cex=.25,asp=1.5,xlab="LONGITUDE",ylab="LATITUDE",
+ main="FLORIDA CENSUS BLOCK GROUPS & CLUSTER CENTROIDS")
> points(MEAN_LONGITUDE,MEAN_LATITUDE,col="red",pch=19,cex=.75)
> dev.off()
null device 
          1 
> 
> # Geoplot of FL census block group clusters
> pdf("c:/CONGRESSIONAL_DISTRICTING/FL_Census_Block_Group_Clusters.pdf")
> plot(a[,1],a[,2],asp=1.5,cex=.25,col=rainbow(k)[c],pch=19,xlab="LONGITUDE",ylab="LATITUDE",
+ main="FLORIDA CENSUS BLOCK GROUP CLUSTERS")
> dev.off()
null device 
          1 
> date() # Time
[1] "Mon Sep 27 19:04:46 2021"
> 
